CCS PCD C Compiler, Version 5.068, 5967               29-Oct-19 14:35

               Filename:   C:\Users\Admin\Desktop\ECE422_Lab8\Lab8_1.lst

               ROM used:   2006 bytes (18%)
                           Largest free fragment is 9258
               RAM used:   426 (22%) at main() level
                           426 (22%) worst case
               Stack used: 16 locations
               Stack size: 96

*
0000:  GOTO    5AC
.................... #include <Lab8_1.h> 
.................... #include <24FV16KM202.h> 
.................... //////////// Standard Header file for the PIC24FV16KM202 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FV16KM202 
*
0200:  MOV     W5,[W15++]
0202:  MOV     #C,W5
0204:  REPEAT  #3
0206:  MOV     [W5++],[W15++]
0208:  MOV     W0,W4
020A:  MOV     W1,W5
020C:  MOV     W2,W6
020E:  MOV     W3,W7
0210:  CLR     W0
0212:  CLR     W1
0214:  CLR     W2
0216:  CLR     W3
0218:  BCLR    W8.0
021A:  BTSS    W7.F
021C:  BRA     22E
021E:  BSET    W8.0
0220:  COM     W7,W7
0222:  COM     W6,W6
0224:  COM     W5,W5
0226:  NEG     W4,W4
0228:  ADDC    W5,#0,W5
022A:  ADDC    W6,#0,W6
022C:  ADDC    W7,#0,W7
022E:  IOR      W4,  W5,W9
0230:  BRA     NZ,236
0232:  IOR      W6,  W7,W9
0234:  BRA     Z,260
0236:  MOV     #473,W9
0238:  BTSC    W3.4
023A:  BRA     252
023C:  BCLR.B  42.0
023E:  RLC     W4,W4
0240:  RLC     W5,W5
0242:  RLC     W6,W6
0244:  RLC     W7,W7
0246:  RLC     W0,W0
0248:  RLC     W1,W1
024A:  RLC     W2,W2
024C:  RLC     W3,W3
024E:  DEC     W9,W9
0250:  BRA     NZ,238
0252:  SL      W9,#4,W9
0254:  BCLR.B  42.0
0256:  BCLR    W9.F
0258:  BCLR    W3.4
025A:  XOR     W9,W3,W3
025C:  BTSC    W8.0
025E:  BSET    W3.F
0260:  MOV     #12,W5
0262:  REPEAT  #3
0264:  MOV     [--W15],[W5--]
0266:  MOV     [--W15],W5
0268:  RETURN  
026A:  MOV     W8,[W15++]
026C:  MOV     #12,W8
026E:  REPEAT  #4
0270:  MOV     [W8++],[W15++]
0272:  CLR     W11
0274:  MUL.UU  W12,#0,W12
0276:  MOV     W3,W8
0278:  MOV     W7,W9
027A:  MOV     #7FF,W10
027C:  BCLR.B  42.0
027E:  BCLR.B  42.1
0280:  ASR     W8,#4,W8
0282:  AND     W10,W8,W8
0284:  CP0     W8
0286:  BRA     Z,36A
0288:  BCLR.B  42.0
028A:  BCLR.B  42.1
028C:  ASR     W9,#4,W9
028E:  AND     W10,W9,W9
0290:  CP0     W9
0292:  BRA     Z,36A
0294:  ADD     W9,W8,W8
0296:  BTSC    W9.B
0298:  BRA     2A2
029A:  SUB     #3FF,W8
029C:  BRA     Z,36A
029E:  BRA     NC,36A
02A0:  BRA     2A8
02A2:  MOV     #401,W10
02A4:  ADD.B   W10L,W5L,W5L
02A6:  BRA     C,36A
02A8:  XOR     W3,W7,W13
02AA:  BCLR.B  42.0
02AC:  BCLR.B  42.1
02AE:  AND     #F,W3
02B0:  BSET    W3.4
02B2:  AND     #F,W7
02B4:  BSET    W7.4
02B6:  MOV     W8,[W15++]
02B8:  MUL.UU  W4,W1,W8
02BA:  MUL.UU  W5,W0,W10
02BC:  ADD     W8,W10,W10
02BE:  ADDC    W9,W11,W11
02C0:  ADDC    #0,W12
02C2:  MUL.UU  W4,W2,W8
02C4:  ADD     W8,W11,W11
02C6:  ADDC    W9,W12,W12
02C8:  MUL.UU  W5,W1,W8
02CA:  CLR     W10
02CC:  ADD     W8,W11,W11
02CE:  ADDC    W9,W12,W12
02D0:  ADDC    #0,W10
02D2:  MUL.UU  W6,W0,W8
02D4:  ADD     W8,W11,W11
02D6:  ADDC    W9,W12,W12
02D8:  ADDC    #0,W10
02DA:  CLR     W11
02DC:  MUL.UU  W4,W3,W8
02DE:  ADD     W8,W12,W12
02E0:  ADDC    W9,W10,W10
02E2:  ADDC    #0,W11
02E4:  MUL.UU  W5,W2,W8
02E6:  ADD     W8,W12,W12
02E8:  ADDC    W9,W10,W10
02EA:  ADDC    #0,W11
02EC:  MUL.UU  W6,W1,W8
02EE:  ADD     W8,W12,W12
02F0:  ADDC    W9,W10,W10
02F2:  ADDC    #0,W11
02F4:  MUL.UU  W7,W0,W8
02F6:  ADD     W8,W12,W12
02F8:  ADDC    W9,W10,W10
02FA:  ADDC    #0,W11
02FC:  MOV     W12,W0
02FE:  CLR     W12
0300:  MUL.UU  W5,W3,W8
0302:  ADD     W8,W10,W10
0304:  ADDC    W9,W11,W11
0306:  ADDC    #0,W12
0308:  MUL.UU  W6,W2,W8
030A:  ADD     W8,W10,W10
030C:  ADDC    W9,W11,W11
030E:  ADDC    #0,W12
0310:  MUL.UU  W6,W3,W8
0312:  ADD     W8,W11,W11
0314:  ADDC    W9,W12,W12
0316:  MUL.UU  W7,W1,W8
0318:  ADD     W8,W10,W10
031A:  ADDC    W9,W11,W11
031C:  ADDC    #0,W12
031E:  MUL.UU  W7,W2,W8
0320:  ADD     W8,W11,W11
0322:  ADDC    W9,W12,W12
0324:  MUL.UU  W7,W3,W8
0326:  ADD     W8,W12,W12
0328:  MOV     W10,W1
032A:  MOV     W11,W2
032C:  MOV     W12,W3
032E:  MOV     #5,W4
0330:  BCLR.B  42.0
0332:  RRC     W3,W3
0334:  RRC     W2,W2
0336:  RRC     W1,W1
0338:  RRC     W0,W0
033A:  DEC     W4,W4
033C:  BRA     NZ,330
033E:  MOV     [--W15],W8
0340:  INC     W8,W8
0342:  IOR      W0,  W1,W6
0344:  BRA     Z,348
0346:  BRA     34C
0348:  IOR      W2,  W3,W6
034A:  BRA     Z,35C
034C:  BTSC    W3.4
034E:  BRA     35C
0350:  BCLR.B  42.0
0352:  RLC     W0,W0
0354:  RLC     W1,W1
0356:  RLC     W2,W2
0358:  RLC     W3,W3
035A:  DEC     W8,W8
035C:  SL      W8,#4,W8
035E:  BCLR    W3.F
0360:  BTSC    W13.F
0362:  BSET    W3.F
0364:  BCLR    W3.4
0366:  XOR     W8,W3,W3
0368:  BRA     370
036A:  MUL.UU  W0,#0,W0
036C:  MUL.UU  W0,#0,W2
036E:  BRA     370
0370:  MOV     #1A,W8
0372:  REPEAT  #4
0374:  MOV     [--W15],[W8--]
0376:  MOV     [--W15],W8
0378:  RETURN  
037A:  MOV     W8,[W15++]
037C:  MOV     #12,W8
037E:  REPEAT  #4
0380:  MOV     [W8++],[W15++]
0382:  MOV     #8000,W8
0384:  BTSC.B  43.0
0386:  XOR     W8,W7,W7
0388:  CP0     W0
038A:  BRA     NZ,39A
038C:  CP0     W1
038E:  BRA     NZ,39A
0390:  CP0     W2
0392:  BRA     NZ,39A
0394:  MOV     #7FFF,W10
0396:  AND     W3,W10,W10
0398:  BTSS.B  42.1
039A:  MOV     W3,W10
039C:  XOR     W7,W10,W11
039E:  MOV     W3,W8
03A0:  MOV     W7,W9
03A2:  MOV     W7,W12
03A4:  MOV     #7FF,W13
03A6:  BCLR.B  42.1
03A8:  BCLR.B  42.0
03AA:  ASR     W8,#4,W8
03AC:  AND     W13,W8,W8
03AE:  CP0     W8
03B0:  BRA     Z,52A
03B2:  BCLR.B  42.1
03B4:  BCLR.B  42.0
03B6:  ASR     W9,#4,W9
03B8:  AND     W13,W9,W9
03BA:  CP0     W9
03BC:  BRA     Z,53A
03BE:  CLR     W13
03C0:  BCLR.B  42.1
03C2:  BCLR.B  42.0
03C4:  CP      W9,W8
03C6:  BRA     Z,53C
03C8:  BRA     N,54C
03CA:  BCLR    W13.0
03CC:  BSET    W13.1
03CE:  SUB     W9,W8,W8
03D0:  AND     #F,W3
03D2:  BSET    W3.4
03D4:  AND     #F,W7
03D6:  BSET    W7.4
03D8:  SUB     #34,W8
03DA:  BRA     NN,408
03DC:  ADD     #34,W8
03DE:  BCLR.B  42.1
03E0:  BCLR.B  42.0
03E2:  RRC     W3,W3
03E4:  RRC     W2,W2
03E6:  RRC     W1,W1
03E8:  RRC     W0,W0
03EA:  DEC     W8,W8
03EC:  BRA     NZ,3DE
03EE:  BRA     418
03F0:  SUB     #34,W8
03F2:  BRA     NN,412
03F4:  ADD     #34,W8
03F6:  BCLR.B  42.1
03F8:  BCLR.B  42.0
03FA:  RRC     W7,W7
03FC:  RRC     W6,W6
03FE:  RRC     W5,W5
0400:  RRC     W4,W4
0402:  DEC     W8,W8
0404:  BRA     NZ,3F6
0406:  BRA     43E
0408:  MOV     W4,W0
040A:  MOV     W5,W1
040C:  MOV     W6,W2
040E:  MOV     W7,W3
0410:  XOR     W11,W12,W12
0412:  BTSC    W12.F
0414:  BTG     W11.F
0416:  BRA     50A
0418:  BTSS    W11.F
041A:  BRA     45A
041C:  BTSC    W13.4
041E:  MOV     W12,W11
0420:  COM     W0,W0
0422:  COM     W1,W1
0424:  COM     W2,W2
0426:  COM.B   W3L,W3L
0428:  AND.B   #1F,W3L
042A:  INC     W0,W0
042C:  BRA     NZ,438
042E:  INC     W1,W1
0430:  BRA     NZ,438
0432:  INC     W2,W2
0434:  BRA     NZ,438
0436:  INC.B   W3L,W3L
0438:  BTSC    W13.4
043A:  BRA     4A0
043C:  BRA     45A
043E:  BTSS    W11.F
0440:  BRA     45A
0442:  COM     W4,W4
0444:  COM     W5,W5
0446:  COM     W6,W6
0448:  COM.B   W7L,W7L
044A:  AND.B   #1F,W7L
044C:  INC     W4,W4
044E:  BRA     NZ,45A
0450:  INC     W5,W5
0452:  BRA     NZ,45A
0454:  INC     W6,W6
0456:  BRA     NZ,45A
0458:  INC.B   W7L,W7L
045A:  BCLR.B  42.1
045C:  BCLR.B  42.0
045E:  ADD     W0,W4,W0
0460:  ADDC    W1,W5,W1
0462:  ADDC    W2,W6,W2
0464:  ADDC.B  W3L,W7L,W3L
0466:  BTSC    W3.5
0468:  BSET    W13.3
046A:  BTSC    W13.0
046C:  BRA     480
046E:  BTSC    W13.1
0470:  BRA     474
0472:  BRA     48A
0474:  BTSC    W11.F
0476:  BRA     4A0
0478:  BTSC    W13.3
047A:  BRA     4CE
047C:  BSET    W13.6
047E:  BRA     4C2
0480:  BTSC    W11.F
0482:  BRA     4A0
0484:  BTSC    W13.3
0486:  BRA     4CE
0488:  BRA     4C2
048A:  BTSC    W11.F
048C:  BRA     496
048E:  MOV     W10,W11
0490:  BTSC    W13.3
0492:  BRA     4CE
0494:  BRA     50A
0496:  BSET    W13.4
0498:  XOR.B   #10,W3L
049A:  BTSC    W3.4
049C:  BRA     41C
049E:  MOV     W10,W11
04A0:  AND     #1F,W3
04A2:  IOR      W3,  W2,W8
04A4:  BRA     NZ,4AA
04A6:  IOR      W1,  W0,W8
04A8:  BRA     Z,4C2
04AA:  BTSC    W3.4
04AC:  BRA     4C2
04AE:  BCLR.B  42.1
04B0:  BCLR.B  42.0
04B2:  RLC     W0,W0
04B4:  RLC     W1,W1
04B6:  RLC     W2,W2
04B8:  RLC     W3,W3
04BA:  DEC     W9,W9
04BC:  BTSC.B  42.1
04BE:  BRA     524
04C0:  BRA     4AA
04C2:  BTSC    W13.0
04C4:  MOV     W10,W11
04C6:  BTSC    W13.1
04C8:  MOV     W12,W11
04CA:  BTSS    W13.5
04CC:  BRA     50A
04CE:  BCLR.B  42.0
04D0:  RRC.B   W3L,W3L
04D2:  RRC     W2,W2
04D4:  RRC     W1,W1
04D6:  RRC     W0,W0
04D8:  BTSC.B  42.0
04DA:  BSET    W13.5
04DC:  INC     W9,W9
04DE:  BTSC.B  42.1
04E0:  BRA     524
04E2:  BTSS    W13.5
04E4:  BRA     502
04E6:  INC     W0,W0
04E8:  BRA     NZ,502
04EA:  INC     W1,W1
04EC:  BRA     NZ,502
04EE:  INC     W2,W2
04F0:  BRA     NZ,502
04F2:  INC     W3,W3
04F4:  BRA     NZ,502
04F6:  RRC.B   W3L,W3L
04F8:  RRC     W2,W2
04FA:  RRC     W1,W1
04FC:  RRC     W0,W0
04FE:  INC     W9,W9
0500:  BRA     Z,524
0502:  BTSC    W13.0
0504:  MOV     W10,W11
0506:  BTSC    W13.1
0508:  MOV     W12,W11
050A:  IOR      W0,  W1,W4
050C:  BRA     NZ,512
050E:  IOR      W2,  W3,W4
0510:  BRA     Z,55E
0512:  BCLR    W3.4
0514:  BCLR.B  42.1
0516:  BCLR.B  42.0
0518:  SL      W9,#4,W9
051A:  XOR     W9,W3,W3
051C:  BSET    W3.F
051E:  BTSS    W11.F
0520:  BCLR    W3.F
0522:  BRA     55E
0524:  MUL.UU  W0,#0,W0
0526:  MUL.UU  W2,#0,W2
0528:  BRA     55E
052A:  MOV     #8000,W8
052C:  BTSC    W10.F
052E:  XOR     W8,W7,W7
0530:  MOV     W5,W1
0532:  MOV     W4,W0
0534:  MOV     W6,W2
0536:  MOV     W7,W3
0538:  BRA     55E
053A:  BRA     55E
053C:  AND     #F,W7
053E:  BSET    W7.4
0540:  AND     #F,W3
0542:  BSET    W3.4
0544:  BTSC    W11.F
0546:  BCLR    W7.4
0548:  BSET    W13.2
054A:  BRA     43E
054C:  AND     #F,W3
054E:  BSET    W3.4
0550:  AND     #F,W7
0552:  BSET    W7.4
0554:  SUB     W8,W9,W8
0556:  ADD     W8,W9,W9
0558:  BCLR    W13.1
055A:  BSET    W13.0
055C:  BRA     3F0
055E:  MOV     #1A,W8
0560:  REPEAT  #4
0562:  MOV     [--W15],[W8--]
0564:  MOV     [--W15],W8
0566:  RETURN  
0568:  MOV     W5,[W15++]
056A:  MOV     W6,[W15++]
056C:  MOV     W3,W4
056E:  MOV     W3,W6
0570:  BCLR.B  42.0
0572:  ASR     W4,#4,W4
0574:  MOV     #7FF,W5
0576:  AND     W5,W4,W4
0578:  BRA     NZ,580
057A:  MUL.UU  W0,#0,W0
057C:  CLR     W2
057E:  BRA     5A6
0580:  SUB     #380,W4
0582:  AND     #F,W3
0584:  MOV     #3,W7
0586:  BCLR.B  42.0
0588:  RLC     W0,W0
058A:  RLC     W1,W1
058C:  RLC     W2,W2
058E:  RLC     W3,W3
0590:  DEC     W7,W7
0592:  BRA     NZ,586
0594:  MOV     W1,W0
0596:  MOV     W2,W1
0598:  BCLR    W3.7
059A:  SWAP    W4
059C:  BCLR.B  42.0
059E:  RRC     W4,W4
05A0:  BTSC    W6.F
05A2:  BSET    W4.F
05A4:  XOR     W4,W3,W2
05A6:  MOV     [--W15],W6
05A8:  MOV     [--W15],W5
05AA:  RETURN  
....................  
.................... #list 
....................  
.................... #device ADC = 8 
.................... #device ICD = 3 
.................... #device ICSP=1 
.................... #use delay(clock = 32MHZ, internal = 8MHZ) 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES FRC_PLL 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV_LOW                 //Brown-out Reset set to lowest voltage 
....................  
....................  
.................... #USE RS232 (UART2, BAUD=115200,PARITY = N, BITS = 8, STOP = 1, TIMEOUT = 500)) 
....................  
....................  
....................  
....................  
....................  
.................... #define COEF_LENGTH 64 
.................... // LPF Filter coefficient 
.................... //!unsigned int8 fir_coef[COEF_LENGTH] = { 
.................... //!      -1,    0,    0,    0,    0,    0,    1,    1,    1,    1,    0,    0, 
.................... //!      0,   -1,   -1,   -2,   -2,   -2,   -2,   -2,   -1,    0,    1,    2, 
.................... //!      4,    5,    7,    9,   10,   11,   12,   13,   13,   12,   11,   10, 
.................... //!      9,    7,    5,    4,    2,    1,    0,   -1,   -2,   -2,   -2,   -2, 
.................... //!     -2,   -1,   -1,    0,    0,    0,    1,    1,    1,    1,    0,    0, 
.................... //!      0,    0,    0,   -1 
.................... //!}; 
.................... //BPF Filter coefficient 
.................... unsigned int8 fir_coef[COEF_LENGTH] = { 
....................       1,    1,    1,    0,   0,   -1,   -2,   -2,   -1,   0,    0,   0, 
....................       0,    0,   -1,   -1,    0,    2,    3,   5,   5,    4,    1,   -4, 
....................     -8,  -11,  -11,  -8,   -2,    4,   10,   13,   13,   10,   4,   -2, 
....................     -8,  -11,  -11,  -8,   -4,    1,    4,   5,   5,    3,    2,    0, 
....................      -1,   -1,    0,    0,    0,    0,   0,   -1,   -2,   -2,   -1,   0, 
....................       0,    1,    1,    1 
.................... }; 
.................... unsigned int8 input_samples[COEF_LENGTH]; // array used as a circular buffer for the input samples  
.................... unsigned int8 coef_index = 0; // used as the index for the filter coefficients array in the difference equation calculation  
.................... unsigned int8 input_index = 0; // used as the index for the input samples array in the difference equation calculation  
.................... unsigned int8 cur = 0; // keeps track of the current position of the circular buffer 
....................   
.................... unsigned int16 accumulator = 0; // accumulator of the output value in the difference equation calculation  
.................... unsigned int16 start, end; // used to calculate the sampling frequency Fs 
....................   
.................... float out; // holds the current output value  
.................... void main() 
05AC:  MOV     #FA0,W15
05AE:  MOV     #FFF,W0
05B0:  MOV     W0,20
05B2:  NOP     
05B4:  BSET.B  81.7
05B6:  CLR     744
05B8:  CLR     90A
05BA:  MOV     #8000,W4
05BC:  MOV     W4,230
05BE:  MOV     #400,W4
05C0:  MOV     W4,232
05C2:  BSET.B  230.3
05C4:  MOV     #22,W4
05C6:  MOV     W4,238
05C8:  CLR.B   98C
05CA:  CLR.B   98D
05CC:  CLR.B   98E
05CE:  CLR     990
05D0:  CLR     4E0
05D2:  CLR     4E2
05D4:  BRA     698
05D6:  DATA    C0,06,08
05D8:  DATA    5A,00,00
05DA:  DATA    4B,F0,3F
05DC:  DATA    5C,0A,58
05DE:  DATA    F6,3B,8F
05E0:  DATA    00,C0,3C
05E2:  DATA    8B,28,AC
05E4:  DATA    3C,BE,F6
05E6:  DATA    3F,D2,D5
05E8:  DATA    44,16,8C
05EA:  DATA    15,D7,BF
05EC:  DATA    69,00,5A
05EE:  DATA    2E,1B,87
05F0:  DATA    99,3F,9A
05F2:  DATA    5F,AD,4B
05F4:  DATA    91,E4,01
05F6:  DATA    C0,5D,11
05F8:  DATA    2F,92,E4
05FA:  DATA    81,FB,3F
05FC:  DATA    38,DA,91
05FE:  DATA    80,9D,C5
0600:  DATA    E0,BF,6F
0602:  DATA    12,C0,B4
0604:  DATA    C3,09,AB
0606:  DATA    3F,6B,C1
0608:  DATA    03,4E,C1
060A:  DATA    B5,45,BF
060C:  DATA    F7,40,05
060E:  DATA    FF,00,5A
0610:  DATA    EF,3F,F3
0612:  DATA    A3,E2,F7
0614:  DATA    D7,FF,01
0616:  DATA    40,C0,B4
0618:  DATA    FF,05,3C
061A:  DATA    58,FC,3F
061C:  DATA    3B,D3,C0
061E:  DATA    B5,BA,8C
0620:  DATA    E2,3F,39
0622:  DATA    D3,C7,3D
0624:  DATA    41,79,B2
0626:  DATA    3F,87,0D
0628:  DATA    3C,50,D0
062A:  DATA    AF,62,3F
062C:  DATA    30,4B,8D
062E:  DATA    A2,82,AA
0630:  DATA    04,40,09
0632:  DATA    A0,40,4A
0634:  DATA    05,76,03
0636:  DATA    40,EC,9E
0638:  DATA    37,88,A6
063A:  DATA    44,F0,3F
063C:  DATA    8F,12,8D
063E:  DATA    29,9A,5B
0640:  DATA    C7,3F,0E
0642:  DATA    E0,80,7C
0644:  DATA    A1,D8,86
0646:  DATA    3F,29,4B
0648:  DATA    FB,95,C2
064A:  DATA    37,1A,3F
064C:  DATA    80,09,09
064E:  DATA    0C,01,01
0650:  DATA    01,00,00
0652:  DATA    FF,FE,FE
0654:  DATA    FF,40,05
0656:  DATA    00,00,24
0658:  DATA    FF,FF,00
065A:  DATA    02,03,05
065C:  DATA    05,04,01
065E:  DATA    FC,F8,F5
0660:  DATA    F5,F8,FE
0662:  DATA    04,0A,0D
0664:  DATA    0D,0A,04
0666:  DATA    FE,F8,F5
0668:  DATA    F5,F8,FC
066A:  DATA    01,04,05
066C:  DATA    05,03,02
066E:  DATA    00,FF,FF
0670:  DATA    40,05,00
0672:  DATA    00,09,FF
0674:  DATA    FE,FE,FF
0676:  DATA    00,00,01
0678:  DATA    01,01,00
067A:  DATA    00,00,00
067C:  INC     W2,W2
067E:  CP      W2,#1
0680:  BRA     NZ,68A
0682:  TBLRDL  [W1],W3
0684:  TBLRDH  [W1++],W4
0686:  MOV.B   6,W0L
0688:  RETURN  
068A:  CP      W2,#2
068C:  BRA     NZ,692
068E:  MOV.B   7,W0L
0690:  RETURN  
0692:  MOV.B   8,W0L
0694:  CLR     W2
0696:  RETURN  
0698:  MOV     #0,W6
069A:  MOV     #0,W0
069C:  MOV     W0,32
069E:  MOV     #5D6,W0
06A0:  MOV     W0,W1
06A2:  CLR     W2
06A4:  CALL    67C
06A8:  MOV.B   W0L,B
06AA:  CALL    67C
06AE:  MOV.B   W0L,A
06B0:  CP0     W5
06B2:  BRA     Z,6E6
06B4:  BTSS    W5.F
06B6:  BRA     6C6
06B8:  CALL    67C
06BC:  MOV.B   W0L,D
06BE:  CALL    67C
06C2:  MOV.B   W0L,C
06C4:  BCLR    W5.F
06C6:  BTSS    W5.E
06C8:  BRA     6DA
06CA:  BCLR    W5.E
06CC:  DEC     W5,W5
06CE:  CALL    67C
06D2:  MOV.B   W0L,W7L
06D4:  REPEAT  W5
06D6:  MOV.B   W7L,[W6++]
06D8:  BRA     6A4
06DA:  CALL    67C
06DE:  MOV.B   W0L,[W6++]
06E0:  DEC     W5,W5
06E2:  BRA     NZ,6DA
06E4:  BRA     6A4
.................... { 
....................    // Setup ADC     
....................    setup_adc(ADC_CLOCK_DIV_2 | ADC_TAD_MUL_4);     
06E6:  MOV     #401,W4
06E8:  MOV     W4,344
06EA:  MOV     #8070,W4
06EC:  MOV     W4,340
....................    setup_adc_ports(sAN0 | VSS_VDD);     
06EE:  MOV     #1,W4
06F0:  MOV     W4,4E0
06F2:  CLR     4E2
06F4:  CLR     4E4
06F6:  CLR     342
....................    // Setup DAC     
....................    setup_dac(1,DAC_REF_VDD | DAC_ON);     
06F8:  MOV     #8002,W4
06FA:  MOV     W4,274
....................    setup_opamp1(OPAMP_ENABLED | OPAMP_PI_TO_DAC | OPAMP_NI_TO_OUTPUT | OPAMP_HIGH_POWER_MODE);       
06FC:  MOV     #80AD,W4
06FE:  MOV     W4,24A
....................    // Setup Timer to calculate sampling frequency (Fs)     
....................    setup_timer1(T1_INTERNAL | T1_DIV_BY_1);    set_timer1(0);         
0700:  CLR     104
0702:  SETM    102
0704:  MOV     #8000,W4
0706:  MOV     W4,104
0708:  CLR     100
....................    // Initialize the input samples array with zeros     
....................    for(int i = COEF_LENGTH; i < 1; i--){        
070A:  MOV     #40,W4
070C:  MOV     W4,99A
070E:  MOV     99A,W4
0710:  CP      W4,#1
0712:  BRA     GE,720
....................    input_samples[i] =  0;     
0714:  MOV     #94C,W4
0716:  MOV     99A,W3
0718:  ADD     W3,W4,W5
071A:  CLR.B   [W5]
071C:  DEC     099A
071E:  BRA     70E
....................    } 
....................    while(TRUE) 
....................    { 
....................       //start = get_timer1();        
....................       input_samples[cur] =  read_adc(ADC_START_AND_READ);               
0720:  MOV     98E,W4
0722:  CLR.B   9
0724:  MOV     #94C,W3
0726:  ADD     W4,W3,W5
0728:  BCLR.B  340.0
072A:  BSET.B  340.1
072C:  BTSS.B  340.0
072E:  BRA     72C
0730:  MOV     300,W0
0732:  LSR     W0,#2,W0
0734:  MOV.B   W0L,[W5]
....................       input_index = cur;        
0736:  MOV.B   98E,W0L
0738:  MOV.B   W0L,98D
....................       accumulator = 0;        
073A:  CLR     990
....................       coef_index = 0; 
073C:  CLR.B   98C
....................        while(coef_index < COEF_LENGTH - 1){           
073E:  MOV     98C,W4
0740:  MOV     #3F,W3
0742:  CP.B    W3L,W4L
0744:  BRA     LEU,778
....................          accumulator += input_samples[input_index]*fir_coef[coef_index];           
0746:  MOV     98C,W4
0748:  LSR     W4,#8,W4
074A:  MOV     #94C,W3
074C:  ADD     W4,W3,W0
074E:  MOV.B   [W0],W5L
0750:  MOV     98C,W4
0752:  CLR.B   9
0754:  MOV     #90C,W3
0756:  ADD     W4,W3,W0
0758:  MOV     W0,W4
075A:  MOV.B   [W4],W0L
075C:  CLR.B   B
075E:  CLR.B   1
0760:  MUL.UU  W5,W0,W0
0762:  ZE      W0,W0
0764:  ADD     990
....................          // condition for the circular buffer           
....................          if(input_index == COEF_LENGTH - 1)              
0766:  MOV     98C,W4
0768:  LSR     W4,#8,W4
076A:  XOR.B   #3F,W4L
076C:  BRA     NZ,772
....................          input_index = 0;           
076E:  CLR.B   98D
0770:  BRA     774
....................          else              
....................          input_index++;                        
0772:  INC.B   098D
....................          coef_index++;        
0774:  INC.B   098C
0776:  BRA     73E
....................          } 
....................          // Scale the output value from 16-bit integer to 8-bit integer        
....................          // 256/32768 = 0.007812        
....................          // Offset (128) may not be needed depending on the offset of the input signal 
....................          out = accumulator*(0.007812)+128;        
0778:  MOV     990,W0
077A:  MOV     #0,W1
077C:  MOV     #0,W2
077E:  MOV     #0,W3
0780:  CALL    200
0784:  MOV     #FA51,W4
0786:  MOV     #C842,W5
0788:  MOV     #FF79,W6
078A:  MOV     #3F7F,W7
078C:  CALL    26A
0790:  MOV     W0,W5
0792:  MOV     W1,W6
0794:  MOV     W2,W7
0796:  MOV     W3,W8
0798:  BCLR.B  43.0
079A:  MOV     W5,[W15++]
079C:  MOV     W6,[W15++]
079E:  MOV     W7,[W15++]
07A0:  MOV     W5,W0
07A2:  MOV     W6,W1
07A4:  MOV     W7,W2
07A6:  MOV     W8,W3
07A8:  MOV     #0,W4
07AA:  MOV     #0,W5
07AC:  MOV     #0,W6
07AE:  MOV     #4060,W7
07B0:  CALL    37A
07B4:  MOV     [--W15],W7
07B6:  MOV     [--W15],W6
07B8:  MOV     [--W15],W5
07BA:  CALL    568
07BE:  MOV     W1,996
07C0:  MOV     W2,998
....................          dac_write(1,out); 
07C2:  MOV.B   996,W0L
07C4:  MOV.B   W0L,276
....................          // condition for the circular buffer        
....................          if(cur == 0)           
07C6:  CP0.B   98E
07C8:  BRA     NZ,7D0
....................          cur = COEF_LENGTH - 1;        
07CA:  MOV.B   #3F,W0L
07CC:  MOV.B   W0L,98E
07CE:  BRA     7D2
....................          else           
....................          cur--; 
07D0:  DEC.B   098E
07D2:  BRA     720
....................           //end = get_timer1();        
....................           //printf("\r\nFs = %f Hz",(1.0/((float)(end-start)))*1.6*pow(10,7));        
....................           //delay_ms(500); 
....................    } 
....................  
.................... } 
07D4:  BRA     7D4

Configuration Fuses:
   Word  1L: 000F   NOWRTB NOBSS
          H: 0000  
   Word  2L: 0000  
          H: 0000  
   Word  3L: 0003   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 00E1   FRC_PLL SOSC_ANALOG LPRCHIGH IESO
          H: 0000  
   Word  5L: 003B   NOPR OSCIO POSCFREQ_H SOSC_HIGH CKSFSM
          H: 0000  
   Word  6L: 005F   WPOSTS16 WDT128 WINDIS NOWDT
          H: 0000  
   Word  7L: 0094   NOBROWNOUT NOPUT NOALTI2C1 BORV_LOW MCLR
          H: 0000  
   Word  8L: 0003   ICSP1 DEBUG
          H: 0000  

   Some fuses have been forced to be compatible with the ICD debugger.
